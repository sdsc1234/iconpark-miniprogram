/**
 * @file runtime 运行时
 * @author Auto Generated by IconPark
 */

// 默认属性
export const DEFAULT_ICON_CONFIGS = {
    size: '1em',
    strokeWidth: 4,
    strokeLinecap: 'round',
    strokeLinejoin: 'round',
    theme: 'outline',
    colors: {
        outline: {
            fill: '#333',
            background: 'transparent'
        },
        filled: {
            fill: '#333',
            background: '#FFF'
        },
        twoTone: {
            fill: '#333',
            twoTone: '#2F88FF'
        },
        multiColor: {
            outStrokeColor: '#333',
            outFillColor: '#2F88FF',
            innerStrokeColor: '#FFF',
            innerFillColor: '#43CCF8'
        }
    },
    prefix: 'i'
}

function guid() {
    return 'icon-' + (((1 + Math.random()) * 0x100000000) | 0).toString(16).substring(1)
}

// 属性转换函数
export function IconConverter(id, icon, config) {

    const fill = typeof icon.fill === 'string' ? [icon.fill] : icon.fill || []
    const colors = []

    const theme = icon.theme || config.theme

    switch (theme) {
        case 'outline':
            colors.push(typeof fill[0] === 'string' ? fill[0] : 'currentColor')
            colors.push('transparent')
            colors.push(typeof fill[0] === 'string' ? fill[0] : 'currentColor')
            colors.push('transparent')
            break
        case 'filled':
            colors.push(typeof fill[0] === 'string' ? fill[0] : 'currentColor')
            colors.push(typeof fill[0] === 'string' ? fill[0] : 'currentColor')
            colors.push('#FFF')
            colors.push('#FFF')
            break
        case 'two-tone':
            colors.push(typeof fill[0] === 'string' ? fill[0] : 'currentColor')
            colors.push(typeof fill[1] === 'string' ? fill[1] : config.colors.twoTone.twoTone)
            colors.push(typeof fill[0] === 'string' ? fill[0] : 'currentColor')
            colors.push(typeof fill[1] === 'string' ? fill[1] : config.colors.twoTone.twoTone)
            break
        case 'multi-color':
            colors.push(typeof fill[0] === 'string' ? fill[0] : 'currentColor')
            colors.push(typeof fill[1] === 'string' ? fill[1] : config.colors.multiColor.outFillColor)
            colors.push(typeof fill[2] === 'string' ? fill[2] : config.colors.multiColor.innerStrokeColor)
            colors.push(typeof fill[3] === 'string' ? fill[3] : config.colors.multiColor.innerFillColor)
            break
    }

    return {
        size: icon.size || config.size,
        strokeWidth: icon.strokeWidth || config.strokeWidth,
        strokeLinecap: icon.strokeLinecap || config.strokeLinecap,
        strokeLinejoin: icon.strokeLinejoin || config.strokeLinejoin,
        colors,
        id
    }
}

// 图标配置
let currentConfig = DEFAULT_ICON_CONFIGS

export function setConfig(config) {
    currentConfig = config
}

export function getConfig() {
    return currentConfig
}

// 图标Wrapper
export function IconDefaultProps(props) {
    const config = getConfig()
    return IconConverter(guid(), props, config)
}